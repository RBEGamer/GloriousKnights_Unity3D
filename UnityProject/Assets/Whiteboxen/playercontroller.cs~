using UnityEngine;
using System.Collections;
using InControl;
public class playercontroller : MonoBehaviour {
	public vars.team_id team_id;
	public Vector3 spawn_pos;
	public vars.player_id player_id;
	public float speed_multiplier_ground = 15.0f;
	public float speed_multiplier_air = 10.0f;
	public float jump_height = 60.0f;
	public float spawn_particle_system_speed = 4.0f;
	public bool isGrounded = false;
	public GameObject spawn_particle_system_holder;
	public GameObject player_model_holder;
	InputDevice inputDevice;
	public float rotation_update_timer_toggle = 0.2f;
	private float rotation_update_timer_curr = 0.0f;
	public float roation_change_velocity = 0.1f;
	private Vector3 pos_update_start;
	private Vector3 pos_update_end;
	Rigidbody rd;
	public int  pid = -1;


	public float rumble_timer_current = 0.0f;
	public float rumble_timer_max = 0.3f;
	public bool rumble_active = false;
	public float rumble_intense = 5.0f;
	public vars.player_statistics player_stat;
	void OnCollisionEnter(Collision other) {

		if(other.gameObject.tag.Contains("ground")) {
			isGrounded = true;
		}
	}
	void OnCollisionStay(Collision other) {

		if(other.gameObject.tag.Contains("ground")) {
			isGrounded = true;
		}
	}
	void OnCollisionExit(Collision other) {
		if(other.gameObject.tag.Contains("ground")) {
			isGrounded = false;
		}
	}



	public void spawn(){
		player_stat.ball_contacts = 0;
		player_stat.jumps = 0;
		player_stat.schlag = 0;

		this.gameObject.GetComponent<Rigidbody>().useGravity = true;
		this.transform.position = spawn_pos;
		spawn_particle_system_holder.GetComponent<ParticleSystem>().Play();
	}

	public void rumble(){
		inputDevice.Vibrate(rumble_intense);
		rumble_active = true;
	}

	public void set_pause_pos(){
		this.transform.position = GameObject.Find("pause_position").gameObject.transform.position; //set the position to the pause pos outside the screen
		rd.useGravity = false;
	}
	// Use this for initialization
	void Start () {
		spawn_pos = this.transform.position; //save the spawn pos
		spawn_particle_system_holder.GetComponent<ParticleSystem>().playbackSpeed = spawn_particle_system_speed;
		rd = this.GetComponent<Rigidbody>();
		set_pause_pos();
		switch (player_id) {
		case vars.player_id.player_1: pid = 0; break;
		case vars.player_id.player_2: pid = 1; break;
		case vars.player_id.player_3: pid = 2; break;
		case vars.player_id.player_4: pid = 3; break;
		default:
			break;
		}
		inputDevice = (InputManager.Devices.Count > pid) ? InputManager.Devices[pid] : null;
		if(inputDevice != null ){
			spawn();
		}
	}
	
	// Update is called once per frame
	void Update () {
		if(inputDevice != null){
			pos_update_start = this.transform.position;
			//right 270 -90 0
			//left 270 -270 0
			//front 270 0 0
			if(rotation_update_timer_curr >= rotation_update_timer_toggle){
				rotation_update_timer_curr = 0.0f;
				if(rd.velocity.x > -roation_change_velocity && rd.velocity.x < roation_change_velocity){
					player_model_holder.transform.rotation =  Quaternion.Euler(270, 0, 0);
				}else  if(rd.velocity.x > roation_change_velocity){
					player_model_holder.transform.rotation =  Quaternion.Euler(270, 90, 0);
				}else if(rd.velocity.x < -roation_change_velocity){
					player_model_holder.transform.rotation =  Quaternion.Euler(270, -90, 0);
			}else{
					player_model_holder.transform.rotation =   Quaternion.Euler(270, 0, 0);
			}
			}else{
				rotation_update_timer_curr += Time.deltaTime;
			}

			if (inputDevice.LeftStick.Left && isGrounded){
				rd.AddForce(new Vector3(1.0f,0.0f,0.0f)*speed_multiplier_ground);
			}
			if (inputDevice.LeftStick.Right && isGrounded){
				rd.AddForce(new Vector3(-1.0f,0.0f,0.0f)*speed_multiplier_ground);
			}

			if (inputDevice.LeftStick.Left && !isGrounded){
				rd.AddForce(new Vector3(1.0f,0.0f,0.0f)*speed_multiplier_air);
			}
			if (inputDevice.LeftStick.Right && !isGrounded){
				rd.AddForce(new Vector3(-1.0f,0.0f,0.0f)*speed_multiplier_air);
			}
			// jump
			if (inputDevice.Action1 && isGrounded)
			{
				rd.AddForce(new Vector3(0.0f, 1.0f*jump_height, 0.0f));
				player_stat.jumps++;
			}

			if(inputDevice.MenuWasPressed){
				spawn();
			}



			if(rumble_timer_current >= rumble_timer_max && rumble_active){
				rumble_timer_current = 0.0f;
				inputDevice.Vibrate(0.0f);
				rumble_active = false;
			}else{
				if(rumble_active){
					rumble_timer_current += Time.deltaTime;
				}


			}

			pos_update_end = this.transform.position;
		}else{
			inputDevice = (InputManager.Devices.Count > pid) ? InputManager.Devices[pid] : null;
			if(inputDevice != null ){
				spawn();
			}
		}
	}
}
